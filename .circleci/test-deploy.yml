version: 2.1
orbs:
  # Permits to test a real-life use-case where we first build a combined config
  # and then work with it
  config-splitting: circle-makotom-orbs/config-splitting@0.0.8
  # Your orb will be automatically injected here during the pipeline.
  # Reference your orb's jobs and commands below as they will exist when built.
  orb-tools: circleci/orb-tools@12.0
  # The orb definition is intentionally not included here. It will be injected into the pipeline.
  python: circleci/python@2.0.3
  .: {}

# Use this tag to ensure test jobs always run,
# even though the downstream publish job will only run on release tags.
filters: &filters
  tags:
    only: /.*/

# Filter for release tags.
release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

jobs:
  scripts-test:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: src/scripts/requirements.txt
      - run:
          name: Run tests
          command: python -m unittest discover src

  # Create jobs to test the commands of your orbs.
  # You may want to add additional validation steps to ensure the commands are working as expected.
  command-test:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - config-splitting/prepare
      - config-splitting/combine-configs:
          config-list-file: .circleci-config-dependencies
          output: /tmp/continuation-config.yml
          shared-config-file: .circleci/continue-shared.yml
      - ./workflow-job-patching:
          circleci-config-path: /tmp/continuation-config.yml
          output-config-path: /tmp/continuation-config.yml
          jobs-to-transform-config-path: ".circleci/test-deploy.yml"

workflows:
  test-deploy:
    jobs:
      - scripts-test:
        filters: *filters
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      # Test your orb's commands in a custom job and test your orb's jobs directly as a part of this workflow.
      - command-test:
          filters: *filters
          requires:
            - scripts-test
      # The orb must be re-packed for publishing, and saved to the workspace.
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: doth/conditional-jobs
          vcs_type: << pipeline.project.type >>
          pub_type: production
          # Ensure this job requires all test jobs and the pack job.
          requires:
            - orb-tools/pack
            - command-test
          context: orb-publishing
          filters: *release-filters
